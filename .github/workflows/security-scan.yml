name: Security CI - CodeQL + OSV + Semgrep + Discord Alerts

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '26 12 * * 1'

permissions:
  contents: read
  security-events: write
  packages: read
  actions: read

jobs:
  codeql:
    name: CodeQL Analysis (JS/TS)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - language: javascript-typescript
            build-mode: none

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript
          build-mode: none

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript-typescript"

      - name: Send CodeQL Results to Discord
        if: always()
        run: |
          # Check if there are any CodeQL alerts
          REPO_ALERTS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/code-scanning/alerts?state=open&tool_name=CodeQL")
          
          ALERT_COUNT=$(echo "$REPO_ALERTS" | jq '. | length')
          
          if [ "$ALERT_COUNT" -gt 0 ]; then
            ALERTS=$(echo "$REPO_ALERTS" | jq -r '.[:5] | .[] | "- **\(.rule.security_severity_level // "medium")**: \(.rule.description) (\(.most_recent_instance.location.path):\(.most_recent_instance.location.start_line))"')
            if [ "$ALERT_COUNT" -gt 5 ]; then
              ALERTS="$ALERTS\n- ... e mais $(($ALERT_COUNT - 5)) alertas"
            fi
            TEXT="üîç **CodeQL Scan** encontrou **$ALERT_COUNT** alertas para **${{ github.repository }}**:\n$ALERTS"
          else
            TEXT="‚úÖ **CodeQL Scan** para **${{ github.repository }}**: Nenhuma vulnerabilidade detectada!"
          fi
          
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \"$(echo "$TEXT" | sed 's/"/\\"/g')\"}" \
               "${{ secrets.DISCORD_WEBHOOK_URL }}"

  osv:
    name: OSV Dependency Scan
    runs-on: ubuntu-latest
    needs: codeql
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install OSV Scanner
        run: |
          curl -L https://github.com/google/osv-scanner/releases/latest/download/osv-scanner_linux_amd64 -o osv-scanner
          chmod +x osv-scanner

      - name: Run OSV Scan
        id: osv-scan
        continue-on-error: true
        run: |
          ./osv-scanner --format json --output osv-report.json .
          echo "scan_exit_code=$?" >> $GITHUB_OUTPUT

      - name: Send OSV Alerts to Discord
        if: always()
        run: |
          if [ -f osv-report.json ]; then
            VULN_COUNT=$(jq '.results[].packages[].vulnerabilities | length' osv-report.json 2>/dev/null | awk '{sum += $1} END {print sum+0}')
            
            if [ "$VULN_COUNT" -gt 0 ]; then
              ALERTS=$(jq -r '.results[].packages[].vulnerabilities[] | "- **\(.id)**: \(.summary // "Vulnerabilidade detectada")"' osv-report.json | head -10)
              if [ "$VULN_COUNT" -gt 10 ]; then
                ALERTS="$ALERTS\n- ... e mais $(($VULN_COUNT - 10)) vulnerabilidades"
              fi
              TEXT="‚ö†Ô∏è **OSV Scan** encontrou **$VULN_COUNT** vulnerabilidades para **${{ github.repository }}**:\n$ALERTS"
            else
              TEXT="‚úÖ **OSV Scan** para **${{ github.repository }}**: Nenhuma vulnerabilidade detectada!"
            fi
          else
            TEXT="‚ùå **OSV Scan** para **${{ github.repository }}**: Erro ao executar scan"
          fi
          
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \"$(echo "$TEXT" | sed 's/"/\\"/g')\"}" \
               "${{ secrets.DISCORD_WEBHOOK_URL }}"

  semgrep:
    name: Semgrep Analysis
    runs-on: ubuntu-latest
    needs: codeql
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Semgrep
        run: |
          python -m pip install --upgrade pip
          pip install semgrep

      - name: Run Semgrep
        id: semgrep-scan
        continue-on-error: true
        run: |
          semgrep --config=auto --json --output=semgrep-results.json . || true
          echo "scan_exit_code=$?" >> $GITHUB_OUTPUT

      - name: Send Semgrep Alerts to Discord
        if: always()
        run: |
          if [ -f semgrep-results.json ]; then
            VULN_COUNT=$(jq '.results | length' semgrep-results.json 2>/dev/null || echo "0")
            
            if [ "$VULN_COUNT" -gt 0 ]; then
              ALERTS=$(jq -r '.results[] | "- **\(.check_id)**: \(.extra.message // "Problema detectado") (\(.path):\(.start.line))"' semgrep-results.json | head -10)
              if [ "$VULN_COUNT" -gt 10 ]; then
                ALERTS="$ALERTS\n- ... e mais $(($VULN_COUNT - 10)) problemas"
              fi
              TEXT="‚ö†Ô∏è **Semgrep Scan** encontrou **$VULN_COUNT** problemas para **${{ github.repository }}**:\n$ALERTS"
            else
              TEXT="‚úÖ **Semgrep Scan** para **${{ github.repository }}**: Nenhum problema detectado!"
            fi
          else
            TEXT="‚ùå **Semgrep Scan** para **${{ github.repository }}**: Erro ao executar scan"
          fi
          
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \"$(echo "$TEXT" | sed 's/"/\\"/g')\"}" \
               "${{ secrets.DISCORD_WEBHOOK_URL }}"

  summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [codeql, osv, semgrep]
    if: always()
    steps:
      - name: Send Summary to Discord
        run: |
          # Determine job statuses
          CODEQL_STATUS="${{ needs.codeql.result }}"
          OSV_STATUS="${{ needs.osv.result }}"
          SEMGREP_STATUS="${{ needs.semgrep.result }}"
          
          # Create status emojis
          case $CODEQL_STATUS in
            "success") CODEQL_EMOJI="‚úÖ" ;;
            "failure") CODEQL_EMOJI="‚ùå" ;;
            *) CODEQL_EMOJI="‚ö†Ô∏è" ;;
          esac
          
          case $OSV_STATUS in
            "success") OSV_EMOJI="‚úÖ" ;;
            "failure") OSV_EMOJI="‚ùå" ;;
            *) OSV_EMOJI="‚ö†Ô∏è" ;;
          esac
          
          case $SEMGREP_STATUS in
            "success") SEMGREP_EMOJI="‚úÖ" ;;
            "failure") SEMGREP_EMOJI="‚ùå" ;;
            *) SEMGREP_EMOJI="‚ö†Ô∏è" ;;
          esac
          
          TEXT="üõ°Ô∏è **Relat√≥rio de Seguran√ßa** para **${{ github.repository }}**:\n\n$CODEQL_EMOJI **CodeQL**: $CODEQL_STATUS\n$OSV_EMOJI **OSV Scanner**: $OSV_STATUS\n$SEMGREP_EMOJI **Semgrep**: $SEMGREP_STATUS\n\nüìä Commit: \`${{ github.sha }}\`\nüåø Branch: \`${{ github.ref_name }}\`"
          
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \"$(echo "$TEXT" | sed 's/"/\\"/g')\"}" \
               "${{ secrets.DISCORD_WEBHOOK_URL }}"
